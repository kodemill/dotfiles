{
  // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  //   "prefix": "log",
  //   "body": [
  //     "console.log('$1');",
  //     "$2"
  //   ],
  //   "description": "Log output to console"
  // }
  "console.log variable": {
    "prefix": [
      "cons",
      "log"
    ],
    "body": [
      "console.log('$1', $1)$0"
    ]
  },
  "console.log stringified variable": {
    "prefix": [
      "conss",
      "logstr"
    ],
    "body": [
      "console.log(JSON.stringify($1, null, 2))$0"
    ]
  },
  "destructure": {
    "prefix": [
      "destr",
      "destruct"
    ],
    "body": [
      "const { $2 } = $1$0"
    ]
  },
  "forawaitof": {
    "prefix": "fora",
    "body": [
      "for await (const $2 of $1) {",
      "  $0",
      "}"
    ]
  },
  "testcase": {
    "prefix": [
      "tes",
      "test"
    ],
    "body": [
      "test('$1', async () => {",
      "  $0",
      "})"
    ]
  },
  "describeTestcase": {
    "prefix": [
      "tesd",
      "desc"
    ],
    "body": [
      "describe('$1', () => {",
      "  test('$2', async () => {",
      "    $0",
      "  })",
      "})"
    ]
  },
  "expect": {
    "prefix": [
      "ex",
      "exp"
    ],
    "body": "expect($1).$2"
  },
  "CdkConstruct": {
    "prefix": [
      "cdkc",
      "cdkcon"
    ],
    "body": [
      "import { Construct } from \"@aws-cdk/core\";",
      "",
      "export interface $1Props {",
      "  $2",
      "}",
      "",
      "export class $1 extends Construct {",
      "  constructor(scope: Construct, id: string, props: $1Props) {",
      "    super(scope, id);",
      "    const {$3} = props;",
      "    $0",
      "  }",
      "}",
    ]
  },
  "CdkStack": {
    "prefix": [
      "cdks",
      "cdksta"
    ],
    "body": [
      "import { Stack, StackProps } from \"@aws-cdk/core\";",
      "",
      "export interface $1Props extends StackProps {",
      "  $2",
      "}",
      "",
      "export class $1Stack extends Stack {",
      "  constructor(scope: Construct, props: $1Props, id: string = \"$1\") {",
      "    super(scope, id, props);",
      "    const {$3} = props;",
      "    $0",
      "  }",
      "}",
    ]
  }
}
